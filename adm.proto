/* protobuf generated code shouldn't be here. consider add a script or a flag in main */


// generated xx.pb.go:
// protoc -I . adm.proto --go_out=plugins=grpc:.
//
// generated xx.validator.pb.go:
// 1.安装工具protoc-gen-govalidators: go install github.com/mwitkow/go-proto-validators
// 2.编译proto: protoc --proto_path=$GOPATH/src -I/$ADM_BACKEND_SRC:. --govalidators_out=:. --go_out=plugins=grpc:. adm.proto
// 说明: 上述路径$ADM_BACKEND_SRC是下面import导入的根目录位置（adm_backend） --proto_path指定引用的proto路径

syntax = "proto3";

package adm;

option go_package = "./;v1";

//import "infra/validator/validator.proto";

service ADM {
  // User
  rpc Login(LoginReq) returns (LoginReply) {} //登录
  rpc Logout(LogoutReq) returns (LogoutReply) {} //登出
  rpc ListUser(ListUserReq) returns (ListUserReply) {} //用户列表
  rpc AddUser(AddUserReq) returns (AddUserReply) {} //添加用户
  rpc UpdateUser(UpdateUserReq) returns (UpdateUserReply) {} //更新用户信息
  rpc UpdateUserPassword(UpdateUserPasswordReq) returns (UpdateUserPasswordReply) {} //更新用户密码
  rpc DeleteUser(DeleteUserReq) returns (DeleteUserReply) {} //删除用户
  rpc UserExists(UserExistsReq) returns (UserExistsReply) {} //用户是否存在
  // Authority 二次验证相关接口
  rpc CheckMfa(CheckMfaReq)returns(CheckMfaReply) {}// 登陆前校验是否需要二次验证
  rpc EnableMfa(EnableMfaReq)returns(EnableMfaReply) {} // 添加二次验证
  rpc DisableMfa(DisableMfaReq)returns(DisableMfaReply) {} // 禁用二次验证
  rpc UpdateAvatar(UpdateAvatarReq)returns (UpdateAvatarReply) {}// 更新头像
  rpc ResetPassword(ResetPasswordReq)returns (ResetPasswordReply) {}// 重置用户密码
  rpc GetPwdUpdateTm(GetPwdUpdateTmReq)returns(GetPwdUpdateTmReply) {} //获取用户最后修改密码时间

  // sensor
  rpc ListAgent(ListAgentReq) returns (ListAgentReply) {} //传感器列表
  rpc UpdateAgent(UpdateAgentReq) returns (UpdateAgentReply) {} //更新传感器配置
  rpc CmdAgent(CmdAgentReq) returns (CmdAgentReply) {}  //下发命令到传感器
  rpc DownloadAgent(DownloadAgentReq)  returns (DownloadAgentReply) {}  //下载传感器
  rpc DownCertificate(DownCertificateReq)returns (DownCertificateReply) {}// 下载证书
  rpc DeleteAgent(DeleteAgentReq)returns (DeleteAgentReply) {} // 删除agent
  rpc ListGateway(ListGatewayReq) returns (ListGatewayReply) {} // 网关列表
  rpc ListWecBeat(ListWecBeatReq) returns (ListWecBeatReply) {} // 日志列表
  rpc UpdateAgentVersion(UpdateAgentVersionReq) returns(UpdateAgentVersionReply) {}// 传感器版本更新
  rpc DeleteWecBeat(DeleteWecBeatReq)returns(DeleteWecBeatReply) {}// 日志列表删除
  rpc ListDomainNameFromAgent(ListDomainNameFromAgentReq)returns(ListDomainNameFromAgentReply) {}
  // wec
  rpc GetDCList(GetDCListReq)returns(GetDCListReply) {}
  rpc AddWecConf(AddWecConfReq)returns(AddWecConfReply) {}
  rpc TestWecConf(TestWecConfReq)returns(TestWecConfReply) {}
  rpc WecBeatInfo(WecBeatInfoReq)returns(WecBeatInfoReply) {}
  rpc ListWecBeatEventInfo(ListWecBeatEventInfoReq)returns(ListWecBeatEventInfoReply) {}// 获取事件采集详情列表

  // domain
  rpc ListDomain(ListDomainReq) returns (ListDomainReply) {}  //域列表
  rpc AddDomain(AddDomainReq) returns (AddDomainReply) {} //添加域
  rpc TestDomain(TestDomainReq) returns (TestDomainReply) {} //测试域连接
  rpc UpdateDomain(UpdateDomainReq) returns (UpdateDomainReply) {} //更新域配置
  rpc DeleteDomain(DeleteDomainReq) returns (DeleteDomainReply) {} //删除域配置
  rpc GetDomainObject(GetDomainObjectReq) returns (GetDomainObjectReply) {}  //获取域中的对象信息
  rpc GetDomainObjectInfo(GetDomainObjectInfoReq) returns (GetDomainObjectInfoReply) {}  //获取域中的对象详情信息
  rpc UpdateDomainData(UpdateDomainDataReq)returns(UpdateDomainDataReply) {} // 同步域数据，todo 未同步前端
  rpc GetDomainInfo(GetDomainInfoReq)returns(GetDomainInfoReply) {} // 获取域服务器详情
  rpc SetMsRCP(SetMsRCPReq)returns(SetMsRCPReply) {} // 日志采集开关
  rpc ListDomainNameForEventList(ListDomainNameForEventListReq)returns(ListDomainNameForEventListReply) {}// 获取域名列表
  rpc ListDomainName(ListDomainNameReq)returns(ListDomainNameReply) {}

  // Detection configuration
  rpc AddDomainEntry(AddDomainEntryReq) returns (AddDomainEntryReply) {}  // 添加检测器配置
  rpc DeleteDomainEntry(DeleteDomainEntryReq) returns (DeleteDomainEntryReply) {}  //删除检测配置
  rpc ListDomainEntry(ListDomainEntryReq) returns (ListDomainEntryReply) {} // 域配置条目列表
  // kerberos 规则配置
  rpc UpdateKerberosConf(UpdateKerberosConfReq) returns (UpdateKerberosConfReply) {} //更新kerberos配置
  rpc ListKerberosConf(ListKerberosConfReq) returns (ListKerberosConfReply) {}  //获取kerberos配置
  rpc GetKerberosConf(GetKerberosConfReq) returns (GetKerberosConfReply) {}  //获取kerberos配置
  // whitelist 白名单
  rpc AddRuleWhitelist(AddRuleWhitelistReq) returns (AddRuleWhitelistReply) {}  //添加白名单
  rpc DeleteRuleWhitelist(DeleteRuleWhitelistReq) returns (DeleteRuleWhitelistReply) {}  //删除白名单列表
  rpc UpdateRuleWhitelist(UpdateRuleWhitelistReq) returns (UpdateRuleWhitelistReply) {}  //更新白名单列表
  rpc ListRuleWhitelist(ListRuleWhitelistReq) returns (ListRuleWhitelistReply) {} //获取白名单
  rpc GetRuleWhitelistInfo(GetRuleWhitelistInfoReq) returns (GetRuleWhitelistInfoReply) {} //获取白名单
  rpc ListWhiteField(ListWhiteFieldReq)returns(ListWhiteFieldReply) {}// 获取白名单规则字段
  rpc GetWhiteFieldValue(GetWhiteFieldValueReq)returns(GetWhiteFieldValueReply){} // 获取白名单值

  // system
  rpc GetSystemInfo(GetSystemInfoReq) returns (GetSystemInfoReply) {} //获取系统信息
  rpc DownloadSystemLog(DownloadSystemLogReq) returns (DownloadSystemLogReply) {} //下载日志
  rpc GetSystemLog(GetSystemLogReq) returns (GetSystemLogReply) {} //获取日志
  rpc UpdateReboot(UpdateRebootReq) returns (UpdateRebootReply) {} //重启
  rpc GetLicence(GetLicenceReq) returns (GetLicenceReply) {} //获取许可证
  rpc UpdateLicence(UpdateLicenceReq) returns (UpdateLicenceReply) {}  //更新许可证
  rpc SelectOptionAuditLogEvent(SelectOptionAuditLogEventReq) returns (SelectOptionAuditLogEventReply) {} // 获取日志审计event类型
  rpc ListAuditLog(ListAuditLogReq) returns (ListAuditLogReply) {} //获取审计日志
  rpc DeleteAuditLog(DeleteAuditLogReq) returns (DeleteAuditLogReply) {} //删除审计日志
  rpc ExportAuditLog(ExportAuditLogReq) returns (ExportAuditLogReply) {}  //审计日志导出
  rpc GetTaskState(GetTaskStateReq) returns(GetTaskStateReply) {}//获取任务状态
  rpc UpdateSystemIcon(UpdateSystemIconReq)returns(UpdateSystemIconReply) {}
  rpc GetSystemIcon(GetSystemIconReq)returns(GetSystemIconReply) {}
  rpc NetworkDiag(NetworkDiagReq)returns(NetworkDiagReply) {} //网络诊断
  rpc ListSystemStatus(ListSystemStatusReq)returns(ListSystemStatusReply) {} // 查询服务状态列表
  rpc SetSystemTime(SystemTimeReq)returns(SystemTimeReply) {} // 查询服务状态列表
  rpc GetSystemPing(GetSystemPingReq)returns(GetSystemPingReply) {} // ping 重启在线状态
  rpc SetStorage(SetStorageReq)returns(SetStorageReply) {} // 存储设置
  rpc GetStorage(GetStorageReq)returns(GetStorageReply) {} // 获取存储信息
  rpc ListExportTask(ListExportTaskReq)returns(ListExportTaskReply){} // 导出管理任务

  // threat event
  rpc ListThreatEvent(ListThreatEventReq) returns (ListThreatEventReply) {}  //告警列表
  rpc UpdateThreatEvent(UpdateThreatEventReq) returns (UpdateThreatEventReply) {}   //事件更新
  rpc ExportThreatEvent(ExportThreatEventReq) returns (ExportThreatEventReply) {}  //告警列表导出
  rpc ListThreatActivity(ListThreatActivityReq) returns (ListThreatActivityReply) {}  //告警事件详情
  rpc ListThreatRawLog(ListThreatRawLogReq) returns (ListThreatRawLogReply) {}  //事件原始日志
  rpc GetRuleInfo(GetRuleInfoReq) returns (GetRuleInfoReply) {}  //规则详情
  rpc GetDCNameList(GetDCNameListReq)returns (GetDCNameListReply) {}
  rpc GetTarget(GetTargetReq)returns (GetTargetReply) {} // 攻击目标下拉框
  rpc GetDomainFromAlert(GetDomainFromAlertReq)returns(GetDomainFromAlertReply) {}
  rpc ListThreatEventSearch(ListThreatEventSearchReq)returns(ListThreatEventSearchReply) {} // 匹配攻击事件的搜索事件
  rpc ListRuleTypes(ListRuleTypesReq) returns (ListRuleTypesReply) {}  //获取规则列表
  rpc StateAlertEventByRule(StateAlertEventByRuleReq)returns(StateAlertEventByRuleReply) {} // 根据规则类型统计告警类型
  rpc GetThreatEventByUniqueID(GetThreatEventByUniqueIDReq)returns(GetThreatEventByUniqueIDReply) {}

  // risk market
  rpc StatsAlertActivity(StatsAlertActivityReq)returns(StatsAlertActivityReply){} // 统计最近七天的告警数量
  rpc StatsRiskAssets(StatsRiskAssetsReq)returns(StatsRiskAssetsReply) {}// 统计受害资产
  rpc StatsAlertEvents(StatsAlertEventsReq)returns(StatsAlertEventsReply){} // 统计告警事件
  rpc StatsScanEvents(StatsScanEventsReq)returns(StatsScanEventsReply) {}// 统计主动检测次数
  rpc StatsAssets(StatsAssetsReq)returns(StatsAssetsReply) {} // 统计资产数量
  rpc AlarmAnalysis(AlarmAnalysisReq)returns (AlarmAnalysisReply) {}  // 告警分析
  rpc RiskTrend(RiskTrendReq)returns (RiskTrendReply) {} // 风险趋势
  rpc ListStatsAlertName(ListStatsAlertNameReq)returns(ListStatsAlertNameReply) {} // TOP10攻击时间威胁名称\
  rpc ListStatsAlertType(ListStatsAlertTypeReq)returns(ListStatsAlertTypeReply) {} // 告警类型

  // 主动检测-安全概览
  // scan
  rpc ScanInspection(ScanInspectionReq) returns(ScanInspectionReply) {}         // 一键监测
  rpc StopScan(StopScanReq)returns (StopScanReply) {}                           // 取消监测
  rpc ExportScanEvent(ExportScanEventReq) returns (ExportScanEventReply) {}     //基线事件列表导出
  rpc GetScanTaskState(GetScanTaskStateReq) returns(GetScanTaskStateReply) {}   // 获取扫描状态
  rpc GetScanScore(GetScanScoreReq) returns(GetScanScoreReply) {}               // 获取扫描分数
  rpc GetScanRule(GetScanRuleReq) returns(GetScanRuleReply) {}                  // 获取扫描规则
  rpc LastScanInfo(LastScanInfoReq)returns (LastScanInnfoReply) {}              // 获取上次结果的值
  rpc ListOnlineDomain(ListOnlineDomainReq)returns(ListOnlineDomainReply) {}    // 获取在线的域
  rpc ListDomainByScanEvent(ListDomainByScanEventReq)returns(ListDomainByScanEventReply) {}// 获取事件列表的域名列表，传入eventList
  // leak 漏洞检测
  rpc ScanLeakEvent(ScanLeakEventReq)returns(ScanLeakEventReply) {} // 发送漏洞监测任务
  rpc GetScanLeakEventStatus(GetScanLeakEventStatusReq)returns(GetScanLeakEventStatusReply) {} // 获取漏洞检测状态
  rpc StatsLeakEvent(StatsLeakEventReq)returns(StatsLeakEventReply) {} //统计漏洞信息
  rpc ListScanPluginType(ListScanPluginTypeReq)returns(ListScanPluginTypeReply) {} // 获取所有扫描插件的扫描类型
  rpc ExportLeakEvent(ExportLeakEventReq) returns (ExportLeakEventReply) {}   //告警列表导出
  // 新添加接口
  rpc ProtectInfo(ProtectInfoReq) returns (ProtectInfoReply){} //防护信息
  rpc IsScanning(IsScanningReq) returns (IsScanningReply) {} // 基线扫描和漏洞扫描是否有正在扫描的任务
  rpc BaselineScanStatus(BaselineScanStatusReq) returns (BaselineScanStatusReply){} // 基线扫描所有域正在扫描的状态
  rpc LeakScanStatus(LeakScanStatusReq) returns (LeakScanStatusReply){} // 漏洞扫描所有域正在扫描的状态
  rpc LeakScanLoopholeStatistics(LeakScanLoopholeStatisticsReq) returns (LeakScanLoopholeStatisticsReply){} // 漏洞扫描某域上次扫描出的漏洞数和可能的漏洞数
  rpc BaselineNewResult(BaselineNewResultReq) returns (BaselineNewResultReply) {} // 基线扫描最新的任务的分数和问题项
  rpc OverviewLeakEventList(OverviewLeakEventListReq) returns (OverviewLeakEventListReply) {} // 安全概览，漏洞事件列表

  // 主动检测-基线事件
  rpc EventList(EventListReq)returns(EventListReply) {}                         // 事件列表
  rpc EventDetails(EventDetailsReq)returns (EventDetailsReply) {}               // 事件规则信息
  rpc GetInstanceList(GetInstanceListReq) returns (GetInstanceListReply) {}         // 获取关联实例

  // 主动检测-漏洞事件
  rpc ListLeakEvent(ListLeakEventReq)returns(ListLeakEventReply) {} // 获取漏洞事件列表

  // 主动检测-任务管理
  rpc ListTaskManagerGroup(ListTaskManagerGroupReq)returns(ListTaskManagerGroupReply) {} // 获取任务管理列表
  rpc DetailTaskManagerGroup(DetailTaskManagerGroupReq)returns(DetailTaskManagerGroupReply) {} // 获取任务管理详情
  rpc DeleteTaskManagerGroup(DeleteTaskManagerGroupReq)returns(DeleteTaskManagerGroupReply) {} // 删除任务管理

  // 主动检测-检测配置-定时配置
  rpc SetCronTask(SetCronTaskReq)returns(SetCronTaskReply) {}  // 设置定时扫描
  rpc ListCronTask(ListCronTaskReq)returns(ListCronTaskReply) {}  // 获取定时扫描

  // 主动检测-检测配置-规则配置
  rpc ListScanPlugin(ListScanPluginReq)returns(ListScanPluginReply) {} //获取扫描器列表
  rpc UpdateScanPluginEnable(UpdateScanPluginEnableReq)returns(UpdateScanPluginEnableReply) {} // 开关扫描器
  rpc UpdateScanPluginMetaData(UpdateScanPluginMetaDataReq)returns(UpdateScanPluginMetaDataReply) {} // 设置plugin的MetaData

  // Notify 通知模块
  rpc ListNotify(ListNotifyReq)returns (ListNotifyReply) {}
  rpc UpdateNotify(UpdateNotifyReq)returns (UpdateNotifyReply) {}
  rpc StatsNotify(StatsNotifyReq)returns(StatsNotifyReply) {}

  rpc ListNotifyConf(ListNotifyConfReq)returns(ListNotifyConfReply) {} // 通知模块配置列表页
  rpc UpdateNotifyConf(UpdateNotifyConfReq)returns(UpdateNotifyConfReply) {} // 编辑通知配置
  rpc UpdateNotifyConfEnable(UpdateNotifyConfEnableReq)returns(UpdateNotifyConfEnableReply){} // 开关通知配置
  rpc GetNotifyConfInfo(GetNotifyConfInfoReq)returns(GetNotifyConfInfoReply){} // 获取通知配置详情
  rpc ListNotifyTarget(ListNotifyTargetReq)returns(ListNotifyTargetReply){} // 通知目标下拉接口
  rpc TestEmailSend(TestEmailSendReq) returns (TestEmailSendReply) {} //测试告警邮件发送
  rpc SelectOptionNotify(SelectOptionNotifyReq) returns (SelectOptionNotifyReply) {} //

  // 事件报表
  rpc GenerateEventReport(GenerateEventReportReq)returns (GenerateEventReportReply) {} // 生成报表
  rpc ListEventReport(ListEventReportReq)returns(ListEventReportReply) {} // 报表列表
  rpc StatusEventReport(StatusEventReportReq)returns(StatusEventReportReply) {} // 获取报表状态
  rpc DownloadEventReport(DownloadEventReportReq)returns(DownloadEventReportReply) {} // 导出报表
  rpc DeleteEventReport(DeleteEventReportReq)returns(DeleteReportReply) {} // 删除报表

  // assets
  rpc ListAssetsUser(ListAssetsUserReq)returns(ListAssetsUserReply) {}// 用户资产列表
  rpc ListAssetsComputer(ListAssetsComputerReq)returns(ListAssetsComputerReply) {}// 计算机资产列表
  rpc ListAssetsGroup(ListAssetsGroupReq)returns(ListAssetsGroupReply) {}// 组资产列表
  //  rpc CalculateAssets(CalculateAssetsReq)returns(CalculateAssetsReply){}
  //  rpc CalculateAssetsUserEvent(CalculateAssetsUserEventReq)returns(CalculateAssetsUserEventReply){}
  //  rpc CalculateAssetsLoginEvent(CalculateAssetsLoginEventReq)returns(CalculateAssetsLoginEventReply){}
  //  rpc CalculateAssetsComputerEvent(CalculateAssetsComputerEventReq)returns(CalculateAssetsComputerEventReply){}
  //  rpc CalculateAssetsGroup(CalculateAssetsGroupReq)returns(CalculateAssetsGroupReply){}
  rpc GetAssetsDetailsByAlert(GetAssetsDetailsByAlertReq)returns(GetAssetsDetailsByAlertReply) {}// 获取资产信息，区分不同规则类型，支持user,ip,computer,group
  rpc ListGroupByAssets(ListGroupByAssetsReq)returns(ListGroupByAssetsReply) {} // 根据资产获取对应的组信息
  rpc ListAssetsUserByGroup(ListAssetsUserByGroupReq)returns(ListAssetsUserByGroupReply){} // 获取组内成员
  rpc GetAssetsEntry(GetAssetsEntryReq)returns(GetAssetsEntryReply) {} // 获取资产条目
  rpc GetAssetsLabel(GetAssetsLabelReq)returns(GetAssetsLabelReply) {} // 获取资产标签
  rpc GetAssetsActivities(GetAssetsActivitiesReq)returns(GetAssetsActivitiesReply) {} // 获取资产行为
  rpc StatsAssetsActivitiesLevel(StatsAssetsActivitiesLevelReq)returns(StatsAssetsActivitiesLevelReply){} // 统计资产的告警事件
  rpc GetAssetsSensitiveGroupLabelInfo(GetAssetsSensitiveGroupLabelInfoReq)returns(GetAssetsSensitiveGroupLabelInfoReply){} // 获取敏感组标签详情
  rpc ListUsersSensitiveGroup(ListUsersSensitiveGroupReq)returns(ListUsersSensitiveGroupReply){} // 获取用户所属的敏感组列表
  rpc ListAttackPath(ListAttackPathReq)returns(ListAttackPathReply) {} // 攻击路径列表
  rpc ExportAttackPath(ExportAttackPathReq)returns(ExportAttackPathReply) {} // 导出攻击路径


  // search
  rpc ListSearchLogEvent(ListSearchLogEventReq)returns(ListSearchLogEventReply) {}// 获取数据检索列表
  rpc GetSearchLogField(GetSearchLogFieldReq)returns(GetSearchLogFieldReply) {}// 获取支持的各字段
  rpc GetSearchFieldInfo(GetSearchFieldInfoReq)returns(GetSearchFieldInfoReply) {}// 获取字段详情
  rpc GetSearchChartData(GetSearchChartDataReq)returns(GetSearchChartDataReply) {} // 获取数据检索图表数据
  rpc AddSearchTemplate(AddSearchTemplateReq)returns(AddSearchTemplateReply) {} // 添加搜索模板
  rpc ListSearchTemplate(ListSearchTemplateReq)returns(ListSearchTemplateReply) {} // 获取搜索模板
  rpc DeleteSearchTemplate(DeleteSearchTemplateReq)returns(DeleteSearchTemplateReply) {} // 删除搜索模板
  rpc ListSearchTableColumns(ListSearchTableColumnsReq)returns(ListSearchTableColumnsReply) {} // 获取表字段
}

// common page message struct
message ModelPage {
  int32 pageIdx = 1 ;// start index with 1
  int32 pageSize = 2; // if pageSize is -1, we will return all nodes
  int32 total = 3; // the total number of records
}

message LoginReq {
  string username = 1;
  string password = 2;
  string totpCode = 3 ;//validator.field) = {regex: "d{6}|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
}

message LoginReply {
  int32 ID = 1;
  string username = 2;
  string passStrength = 3; // 密码强度: high/middle/low
  string role = 4;
  int32 priv = 5;
  string mobile = 6;
  string email = 7;
  string remark = 8;
  string token = 9;
  bool  hasMfa = 10; // 是否需要二次验证
  bool needChangePwd = 11; // 是否需要修改密码
}

message LogoutReq {
  string username = 1;
}

message LogoutReply {
  string result = 1;
}

message ListUserReq {
  // start index with 1.
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  // the fuzzying matching pairs for this query.
  string search = 3;
  //
  bool  isSelf = 4; // 查询个人信息true，查询子用户列表false
  repeated string filterRole = 5;  // 角色
  repeated string filterMfaStatus = 6; // 二次认证状态 开启enable|禁用disable|关闭stop
  repeated string filterPassStrength = 7; // 密码强度 high/middle/low
  string filterStartCreateTm = 8; // 创建开始时间
  string filterEndCreateTm = 9; // 创建结束时间
  string filterStartPassTm = 10; // 密码最后修改开始时间
  string filterEndPassTm = 11; // 密码最后修改结束时间
  int32 sort = 12; // 创建时间排序，1为升序，-1为降序| 密码修改时间 2为升序，-2为降序
}

message ListUserReply {
  ModelPage page = 1;
  message Details {
    int32 ID = 1;
    string username = 2;
    string passStrength = 3; // 密码强度: high/middle/low
    string role = 4; // 用户角色: mgr 超级管理员|dev 开发|ops 运维|sec 安全
    int32 priv = 5; // 权限类别: 1:super 2:admin 3:guest
    string mobile = 6 ;
    string email = 7 ;
    string remark = 8;
    string createTm = 9;
    bool  hasMfa = 10; // 是否开启二次验证
    string avatar = 11; // 头像
    string pwdUpdateTm = 12; // 密码更新时间
    string address = 13; // 所在地
    string realName = 14; // 真实姓名
    string department = 15; // 部门
    string post = 16; // 岗位
  }
  repeated Details List = 2;
  bool exhausted = 3; // if this is last page
}

message AddUserReq {
  string username = 1;
  string password = 2;
  string role = 3;
  string mobile = 4 ;//validator.field) = {regex: "^1[3|4|5|6|7|8|9][0-9]\\d{8}$|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
  string email = 5 ;//validator.field) = {regex: "\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
  string remark = 6;
  string address = 7; // 所在地
  string realName = 8; // 真实姓名
  string department = 9; // 部门
  string post = 10; // 岗位
}

message AddUserReply {
  string result = 1;
}

message UpdateUserReq {
  string username = 1;
  string mobile = 2 ;//validator.field) = {regex: "^1[3|4|5|6|7|8|9][0-9]\\d{8}$|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
  string email = 3 ;//validator.field) = {regex: "\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
  string remark = 4;
  string role = 5; // 可选，super用户可以修改任意username的role
  string address = 6; // 所在地
  string realName = 7; // 真实姓名
  string department = 8; // 部门
  string post = 9; // 岗位
}

message UpdateUserReply {
  string result = 1;
}

message UpdateUserPasswordReq {
  string oldPassword = 1;
  string newPassword = 2;
  string username = 3; // 可选，super用户可以修改任意username的密码
}

message UpdateUserPasswordReply {
  string result = 1;
}

message DeleteUserReq {
  string username = 1;
}

message DeleteUserReply {
  string result = 1;
}

message UserExistsReq {
  string username = 1;
}
message UserExistsReply {
  bool result = 1;
}

message ListAgentReq {
  // start index with 1.
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  string IP = 3;
  string dcHostname = 4;
  repeated string status = 5; // Init|Running|Stopped
  repeated string packetStatus = 6; // Init|Running|Stopped|Error
  repeated string domain = 7;
  string keyword = 8;
  int32 tmSort = 9; // 创建时间排序，1为升序，-1为降序 | 最后在线时间排序 2为升序 -2为降序
}

message ListAgentReply {
  message mapSlice {
    map<string, string> event = 1;
  }

  ModelPage page = 1;
  message Details {
    string ID = 1;
    string IP = 2 ;
    string hostname = 3;
    string domain = 4 ;
    string status = 5; // 运行状态
    string version = 6;
    string platform = 7;
    string kernelVer = 8;
    map<string, string> netIface = 9;
    repeated string bindNetIface = 10;
    map<string, string> perfLimit = 11;
    repeated mapSlice events = 12;
    string remark = 13;
    string createTm = 14;
    string lastTm = 15;
    string newVersion = 16;
    string domainServer = 17;
    string packetStatus = 18; // 流量采集状态  Init|Running|Stopped|Error
    string agentTime = 19;
    int64 DomainDifferTime = 20; // 域控时间与服务器时间的误差
    string packetAgentStatus = 21;
    string winlogAgentStatus = 22;
    string agentStatusTime = 23;

  }
  repeated Details List = 2;
  bool exhausted = 3; // if this is last page
}

message UpdateAgentReq {
  string ID = 1;
  repeated string bindNetIface = 2;
  map<string, string> perfLimit = 3;
  string remark = 4;
}

message UpdateAgentReply {
  string result = 1;
}

message CmdAgentReq {
  string ID = 1;
  string cmd = 2 ;//validator.field) = {regex: "start|stop|uninstall"}]; // start|stop|uninstall
}

message CmdAgentReply {
  string result = 1;
}

message DownloadAgentReq {
  string Type = 1 ;//validator.field) = {regex: "x64|x86"}]; // x64 x86
}

message DownloadAgentReply {
  string path = 1;
}

message DownCertificateReq {
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
}
message DownCertificateReply {
  string path = 1;
}

message DeleteAgentReq {
  string agentId = 1;
}
message DeleteAgentReply {
  string result = 1;
}

message GetAlertConfReq {
  string alertType = 1; //email syslog post
}

message ListGatewayReq {
  // start index with 1.
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  repeated string filterStatus = 3;
  string keyWord = 4;
}

message ListGatewayReply {
  ModelPage page = 1;

  message event {
    map<string, string> event = 1;
  }
  message domain {// dc属性
    string ip = 1; // ad网关ip
    string hostName = 2; // 域控
    string domain = 3; // 域名
    string status = 4; // 流量采集状态
    string lastOnlineTm = 5; // 域控最后在线时间
  }
  message Details {// 共有属性
    string id = 1; // 传感器ID
    string ip = 2; // 网关IP
    string hostName = 3; // 网管主机名
    domain domains = 4; // ad网关列表
    string status = 5; // 网关状态
    string version = 6; // 版本
    string Platform = 7; // 平台
    map<string, string> perfInfo = 8;
    string remark = 9; // 备注
    repeated event events = 10; // 事件列表
    string createTm = 11; // 创建时间
    string lastOnlineTm = 12; // 网关最后在线时间
  }
  repeated Details list = 2;

}

message ListWecBeatReq {
  // start index with 1.
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  string dcHostname = 3;
  repeated string status = 4;
  int32 tmSort = 5;// 创建时间排序，1为升序，-1为降序， 最后在线时间：2为升序，-2为降序
}

message ListWecBeatReply {
  ModelPage page = 1;
  message Details {
    string id = 1;
    string hostName = 2;
    string domain = 3;
    string status = 4;
    string platform = 5;
    repeated string events = 6;
    string remark = 7;
    string createTm = 8;
    string lastOnlineTm = 9;
    string ipList = 10;
  }
  repeated Details list = 2;
}

message UpdateAgentVersionReq {
  string agentId = 1;
  string version = 2;
}
message UpdateAgentVersionReply {
  string result = 1; //  success failed
}

message DeleteWecBeatReq {
  string beatId = 1;
}

message DeleteWecBeatReply {
  string result = 1; //  success failed
}

message ListDomainNameFromAgentReq {}

message ListDomainNameFromAgentReply {
  message Details {
    string name = 1;
    string value = 2;
  }
  repeated Details domainNameList = 1; // 获取域名列表
}

message GetAlertConfReply {
  // email:
  // server:smtp://222
  // post:
  //    server:htt://xxx.com
  // syslog:
  //    server:192.168.1.2
  string alertType = 1; //email syslog post
  map <string, string> configMap = 2;
}

message ListDomainReq {
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  string filterDomain = 3; // 根据所在域筛选
  string filterStatus = 4; // 根据域状态筛选
  string filterKeyword = 5; // 根据关键词搜索
}

message ListDomainReply {
  ModelPage page = 1;
  message Details {
    string ID = 1;
    string name = 2;
    string dcHostname = 3;
    string status = 4;
    map <string, string> domainInfo = 5;
    string createTm = 6;
    string errMsg = 7;
  }
  repeated Details List = 2;
  bool exhausted = 3; // if this is last page

}

message AddDomainReq {
  string ldapAddr = 1;
  string username = 2;
  string password = 3;
  string DNS = 4 ;//validator.field) = {regex: "^((0|[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(0|[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])$|^(\\s&&[^\\f\\n\\r\\t\\v])*"}]; //可选
}
message AddDomainReply {
  string result = 1;
}

message TestDomainReq {
  string ldapAddr = 1;
  string username = 2;
  string password = 3;
  string DNS = 4 ;//validator.field) = {regex: "^((0|[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(0|[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])$|^(\\s&&[^\\f\\n\\r\\t\\v])*"}]; //可选
}
message TestDomainReply {
  int32 status = 1; // 1为成功，0为失败，
  string msg = 2; // 错误信息
}

message UpdateDomainReq {
  string ID = 1;
  string ldapAddr = 2;
  string username = 3;
  string password = 4;
  string DNS = 5 ;//validator.field) = {regex: "^((0|[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(0|[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])$|^(\\s&&[^\\f\\n\\r\\t\\v])*"}]; //可选
}
message UpdateDomainReply {
  string result = 1;
}

message DeleteDomainReq {
  string ID = 1;
  string Name = 2;
}

message DeleteDomainReply {
  string result = 1;
}

message AddDomainEntryReq {
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
  string entryType = 2; //user|group|computer|honeypot_account
  string entryCnt = 3;
}

message AddDomainEntryReply {
  string result = 1;
}

message DeleteDomainEntryReq {
  repeated string IDList = 1;
}

message DeleteDomainEntryReply {
  string result = 1;
}

message ListDomainEntryReq {
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];  // start index with 1.
  int32 pageSize = 2; // if pageSize is -1, we will return all pods.
  repeated string domain = 3;
  string startTm = 4; // 开始时间
  string endTm = 5; // 结束时间
  string search = 6; // 模糊匹配字段
  string entryType = 7; // 配置类型 user|group|computer|honeypot_account
  int32 timeSort = 8; // 创建时间排序，1为升序，-1为降序
}

message ListDomainEntryReply {
  ModelPage page = 1;
  message Detail {
    string id = 1;
    string name = 2;
    string domain = 3;
    int32 source = 4; // 0是自动，1为手动
    string tm = 5;
  }
  repeated Detail list = 2;
  bool exhausted = 3; // if this is last page
}

message UpdateKerberosConfReq {
  string ID = 1;
  repeated KerberosConfCnt list = 2;
}

message UpdateKerberosConfReply {
  string result = 1;
}

message ListKerberosConfReq {
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];  // start index with 1.
  int32 pageSize = 2; // if pageSize is -1, we will return all pods.
  repeated string domain = 3; // 影响范围
  repeated string ruleName = 4; // 规则名称
  repeated string ruleType = 5; // 规则分类
  int32 sortTm = 6;// 根据时间排序，1为升序，-1为降序
}

message ListKerberosConfReply {
  ModelPage page = 1;
  message Details {
    string ID = 1;
    string domain = 2; // 影响范围
    string ruleName = 3;  // 规则名称
    string ruleType = 4;  // 规则分类
    string updateTm = 5; // 修改时间
    string desc = 6;
  }
  repeated Details list = 2;
  bool exhausted = 3; // if this is last page
}

message GetKerberosConfReq {
  string id = 1;
}

message KerberosConfCnt{
  string cntName = 1;
  string desc = 2;
  repeated string valueList = 3;
  string showType = 4;
  string filedSuffix = 5;
}

message GetKerberosConfReply {
  string id = 1;
  string domain = 2;
  string ruleName = 3;
  string ruleType = 4;
  string desc = 5;
  repeated KerberosConfCnt list = 6;
  string describe = 7;
}

// 白名单
message RuleCnt {
  string name = 1; // 字段名
  string match = 2; // 匹配方式，equal,regex
  string value = 3; // 匹配值
}

message AddRuleWhitelistReq {
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$"}];
  string ruleID = 2; // 规则ID
  int32 matchType = 3;// MatchType 白名单类别，快捷1，自定义2，全局3
  repeated RuleCnt ruleCnt = 4; // 匹配规则
  string remark = 5; //  备注
  string eventID = 6;
}

message AddRuleWhitelistReply {
  string result = 1;
}

message DeleteRuleWhitelistReq {
  repeated string IDList = 1; // 白名单id
}

message DeleteRuleWhitelistReply {
  string result = 1;
}

message UpdateRuleWhitelistReq {
  string ID = 1; // 白名单id
  int32 matchType = 2;// MatchType 白名单类别，快捷1，自定义2，全局3
  repeated RuleCnt ruleCnt = 3;// 匹配规则
  string remark = 4; //备注
}

message UpdateRuleWhitelistReply {
  string result = 1;
}

message ListRuleWhitelistReq {
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];  // start index with 1.
  int32 pageSize = 2; // if pageSize is -1, we will return all pods.
  repeated string domain = 3;
  repeated string ruleName = 4; // 规则名称
  repeated int32 ruleType = 5; // 规则匹配类型
  string startTm = 6;
  string endTm = 7;
  int32 sortTm = 8; // 更新时间排序，1为升序，-1为降序
}

message ListRuleWhitelistReply{
  ModelPage page = 1;
  message Details {
    string ID = 1; // 白名单id
    string domain = 2; // 域
    string ruleID = 3;
    string ruleName = 4; // 告警规则名称
    int32 matchType = 5;// MatchType 白名单类别，快捷1，自定义2，全局3
    string remark = 6;
    string createTm = 7;
    string updateTm = 8;
  }
  repeated Details List = 2;
  bool exhausted = 3; // if this is last page
}

message GetRuleWhitelistInfoReq {
  string ID = 1; // 白名单id
}

message GetRuleWhitelistInfoReply {
  string ID = 1; // 白名单id
  string domain = 2; // 域
  string ruleID = 3;
  string ruleName = 4; // 告警规则名称
  int32 matchType = 5;// MatchType 白名单类别，快捷1，自定义2，全局3
  repeated RuleCnt ruleCnt = 6;// 匹配规则
  string remark = 7;
  string createTm = 8;
  string updateTm = 9;
}

message ListWhiteFieldReq {
  string ruleID = 1;
}

message ListWhiteFieldReply {
  repeated string fieldList = 1;
}

message GetWhiteFieldValueReq{
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
  string filedName = 2;
  string search = 3;
}

message GetWhiteFieldValueReply{
  repeated string valueList = 1;
}

message GetDomainObjectReq {
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
  string name = 2;
}

message GetDomainObjectReply {
  string cn = 1; //名字
  string description = 2;//描述
  string domain = 3; //域
  int32 memberCount = 4; //成员数量
  string sid = 5; //账户sid
  string SAMAccountName = 6; //SAM账户名称
  string scope = 7; //范围 Builtin Universal
  string type = 8; //类型 Security
  string createdTm = 9; //创建时间
  string lastLogon = 10; //最后登录时间
}

message GetDomainObjectInfoReq {
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
  string name = 2;
}

message GetDomainObjectInfoReply {
  //用户信息详情
  message Detail {
    string cn = 1; //名字
    string description = 2;//描述
    string domain = 3; //域
    int32 memberCount = 4; //成员数量
    string sid = 5; //账户sid
    string SAMAccountName = 6; //SAM账户名称
    string scope = 7; //范围 Builtin Universal
    string type = 8; //类型 Security
    string createdTm = 9; //创建时间
    string lastLogon = 10; //最后登录时间
    string DN = 11;
    map<string, string> convention = 12; //常规
    map<string, string> address = 13; //地址
    map<string, string> organization = 14; //组织
  }
  //用户访问控制
  message UserAccountControl {
    repeated string flags = 1; //拥有权限
    map<string, string> translateMap = 2; //翻译
  }

  Detail accountInfo = 1; //当前账户信息
  UserAccountControl userAccountControl = 2; //用户访问控制
  repeated Detail memberList = 3; //成员信息(直接成员)  type=user/group
  repeated Detail memberOf = 4; //用户组信息 type=group
  repeated Detail recursiveList = 5;//递归组
}

message ListRuleTypesReq {
  string ruleID = 1; // 可选，为空时表示获取所有
}

message ListRuleTypesReply {
  message Details {
    string ID = 1; // 规则ID，070003
    string name = 2; // 规则名称
    string type = 3; // 规则类型
  }
  map<string, string> Type = 1;
  repeated Details List = 2;
}

message StateAlertEventByRuleReq {}

message StateAlertEventByRuleReply {
  message Details {
    string name = 1;
    string ruleID = 2;
    int32 count = 3;
    string percentage = 4;
  }
  repeated Details list = 1;
}

message GetSystemInfoReq {}
message GetSystemInfoReply {
  message statusDetails {
    float memoryUsagePercent = 1; //内存使用百分比
    float cpuUsagePercent = 2; //cpu使用百分比
    float diskUsagePercent = 3; //磁盘使用百分比
    uint64 bootTime = 4; //开机使用时间
    repeated float LoadAverage = 5; //最近一分钟，五分钟和十五分钟的系统负载
  }
  message versionDetails {
    string engineVersion = 1; //引擎版本号
    string majorVersion = 2; //主版本号
    int64 engineVersionTimestamp = 3; //引擎版本时间戳
    int64 majorVersionTimestamp = 4; //主版本号时间戳
    string OSPlatform = 5; //操作系统平台
    string OSVersion = 6; //操作系统版本
  }
  message upgradeDetails {
    string upgradeEngineVersion = 1; //升级引擎版本号
    string upgradeMajorVersion = 2; //升级主版本号
  }
  message basicDetails {
    string  ip = 1; //ip
    string systemName = 2; //系统名称
    string companyName = 3; //公司名称
    string officialWebsite = 4; //官网
  }

  statusDetails status = 1;
  versionDetails version = 2;
  basicDetails basic = 3;
  upgradeDetails upgrade = 4;
  string systemCurrentTime = 5;
}

message DownloadSystemLogReq {
  repeated string systemType = 1;// 系统模块 apiserver,db_syncer,ldap_syncer,ad_sync,task_server,task_worker,engine,influxdb,hadoop,flink,install,webssh,scanner
}
message DownloadSystemLogReply {
  string taskUUID = 1; //任务ID
  string path = 2;  //下载路径
}

message GetSystemLogReq {
  int32 pageSize = 1; // 每页条数
  int32 pageIdx = 2 ; // start index with 1
}
message GetSystemLogReply {
  ModelPage page = 1;
  message Details {
    string log = 1;//log json字符串
  }
  repeated Details List = 2;
  bool exhausted = 3; // if this is last page
}

message UpdateRebootReq {
  string type = 1 ;//validator.field) = {regex: "device|engine"}]; //type=device|engine
}
message UpdateRebootReply {
  string result = 1;
}

message GetLicenceReq {
}
message GetLicenceReply {
  string trait = 1; //特征
  int64 startTime = 2; //开始时间戳
  int64 endTime = 3; //结束时间戳
  int32  count = 4; //资产数
  string version = 5;//产品版本
}

message UpdateLicenceReq {
  string code = 1; //激活码
}
message UpdateLicenceReply {
  string result = 1;
}

message SelectOptionAuditLogEventReq {}
message SelectOptionAuditLogEventReply {
  repeated string events = 1; //
}

message ListAuditLogReq {
  // start index with 1.
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  string startTm = 3; // 开始时间
  string endTm = 4; // 结束时间
  string keyword = 5;
  repeated string filterEvent = 6; // 事件
  int32 createSort = 7; // 审计时间 1升级 -1降序
}
message ListAuditLogReply {
  ModelPage page = 1;
  message Details {
    string ID = 1;
    string loginUser = 2;
    string sourceIp = 3;
    string event = 4;
    string eventArgs = 5;
    string eventResult = 6;
    string CreateTm = 7;
    int32  string = 8;
  }
  repeated Details List = 2;
  bool exhausted = 3; // if this is last page
}

message DeleteAuditLogReq {
  repeated string id = 1;
}
message DeleteAuditLogReply {
  string result = 1;
}

message ExportAuditLogReq {
  string startTm = 1;
  string endTm = 2;
}
message ExportAuditLogReply {
  string path = 1;
  string taskUUID = 2;
}

message GetTaskStateReq {
  string taskUUID = 1 ; //任务UUID
}
message GetTaskStateReply {
  string taskUUID = 1; //任务ID
  string taskName = 2; //任务名称
  string state = 3; //任务状态 PENDING RECEIVED STARTED RETRY SUCCESS FAILURE
  string error = 4; //错误日志
  string  createdAt = 5; //创建时间
}

message UpdateSystemIconReq {
  string file = 1;
}

message UpdateSystemIconReply {
  string result = 1; //  success failed
}

message GetSystemIconReq {}

message GetSystemIconReply {
  string icon = 1;
}

message NetworkDiagReq {
  DiagAction type = 1 ;//validator.field) = {is_in_enum: true}];
  string target = 2 ;//validator.field) = {regex: "[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\\.?|((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})(\\.((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})){3}"}]; // 诊断目标
}
enum DiagAction {
  DiagDefault = 0;
  PING = 1;
  TRACEROUTE = 2;
  NSLOOKUP = 3;
  CURL = 4;
  NC = 5;
  DomainPort = 6;
}

message NetworkDiagReply {
  string result = 1; //诊断结果
}

message ListSystemStatusReq {
  string type = 1;// 端口port，服务service，引擎engine，所有all
}

message ListSystemStatusReply {
  string result = 1; //诊断结果
}

message SystemTimeReq {
  string dateOrIp = 1; // 时间,格式(Y-m-d H:i:s)或者时间服务器IP,格式(127.0.0.1)
}

message SystemTimeReply {
  string date = 1; // 当前时间
  string result = 2; // 设置是否成功
}

message GetSystemPingReq {

}

message GetSystemPingReply {
  string result = 1;
}

message GetStorageReq {}
message GetStorageReply {
  int32 storageDataAlarmValue = 1; // 设置的存储告警值
  int32 storageLogValue = 2; // 设置的日志存储时间
  int32 currentDataValue = 3; // 使用百分比
  int32 totalDataValue = 4; // 总空间G
  int32 freeDataValue = 5; // 剩余空间G
  int32 storageAutoClearValue = 6; // 数据自动清理阀值
}

message SetStorageReq {
  int32 storageDataAlarmValue = 1; // 存储数据告警值 %
  int32 storageLogValue = 2; // 日志存储保存天数
  int32 storageAutoClearValue = 3; // 存储自动清理 %
}
message SetStorageReply {
  int32 result = 1; // 是否保存成功
}

message ListExportTaskReq{
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  int32 pageSize = 2;
  repeated string modelType = 3; // 类型 告警事件Alert、基线事件Bashline、系统日志System、漏洞事件Leak、审计日志Audit
  repeated string status = 4; // 状态 padding,start,success,failed
  string startTm = 5; // 开始时间
  string endTm = 6; // 结束时间
  int32 sortTm = 7;// 排序字段，1为升序，-1为降序
}

message ListExportTaskReply{
  ModelPage page = 1;
  message Details{
    string ID = 1;
    string TaskID = 2;
    string fileName = 3;
    string modelType = 4;
    string fileType = 5;
    string status = 6;
    string createTm = 7;
    string filePath = 8;
    string errMsg = 9;
  }
  repeated Details list = 2;//列表
}

message ListThreatEventReq {
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  int32 pageSize = 2;
  //  repeated string domain = 3 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}]; // 域名
  repeated string threatID = 3; // 威胁名称
  repeated string threatLevel = 4; // 威胁等级,严重性
  string startTm = 5; // 开始时间
  string endTm = 6;  // 结束时间
  int32 searchType = 7;// 检索类型,0为普通检索，1为高级检索
  message Details {
    string name = 1; // 检索字段
    string type = 2; // 等于 eq，不等于ne 之前lt，之后gt 两者之间bt，包含contain 不包含 not_contain
    repeated string value = 3;
  }
  repeated Details advancedSearch = 8; // 高级检索
  int32 sortTm = 9; // 时间排序，1为升序，-1为降序
}

message ThreatEventDetails {
  string ID = 1;  //请求详情页
  string ruleID = 2; // 关联规则ID
  string uniqueId = 3; // 确定行为唯一性
  string ruleType = 4; // 规则类型
  string domain = 6;
  string dcHostname = 7;
  string computerName = 8;
  string title = 9; // 告警标题
  string desc = 10; // 告警描述
  int32 riskLevel = 11;  // 风险等级, 5:严重,4:高危,3:中危,2:低危
  string status = 12; // 处理状态:pending|ignored|finished
  int32 duration = 13; // 持续时间，单位s
  int32 repeatCount = 14;
  int32 alertCount = 15; // 触发告警次数
  map<string, string> formData = 16; // 攻击数据源
  string startTm = 17; // 开始时间
  string endTm = 18; // 结束时间
  string source = 19; // 攻击来源
  string target = 20; // 攻击目标
  string ruleName = 21;// 规则名称
  string product = 22;// 应用
  string tmpl = 23; // 模板
}

message ListThreatEventReply {
  ModelPage page = 1;
  repeated ThreatEventDetails List = 2;
  bool exhausted = 3; // if this is last page
}

message UpdateThreatEventReq {
  string ID = 1;
  int32 status = 2 ;//validator.field) = {is_in_enum: true}]; // 状态:ignored
}

enum status {
  eventPending = 0;
  eventIgnored = 1;
  eventFinished = 2;
}

message UpdateThreatEventReply {
  string result = 1;
}

message ExportThreatEventReq {
  string startTm = 1;
  string endTm = 2;
}

message ExportThreatEventReply {
  string taskUUID = 1; //任务ID
  string path = 2;  //下载路径
}

message ListThreatActivityReq {
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  int32 pageSize = 2;
  string eventID = 3; // 可选，如果存在查询对应eventID的威胁活动
  int32 orderCreateTm = 4 ; // 可选，排序 1|-1
  string uniqueID = 5; // 可选，优先使用eventID进行查询
}

message ListThreatActivityReply {
  ModelPage page = 1;

  message TableHeads {
    string columnName = 1;    // 表头名
    string columnComment = 2; // 对应的字段
  }
  repeated TableHeads tableHeads = 2; // 表头

  message Details {
    map<string, string> formData = 1;
  }
  repeated Details List = 3;
  bool exhausted = 4; // if this is last page
}

message ListThreatRawLogReq {
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  int32 pageSize = 2;
  string ID = 3; // 原始日志id
  string eventID = 4; // 可选，如果该值存在，则返回对应事件ID的日志列表
}

message ListThreatRawLogReply {
  ModelPage page = 1;
  message Details {
    string ID = 1;
    string agentId = 2; //传感器唯一ID
    string Type = 3; //日志类型Security Log|System log|krb5|dns|ldap
    string Name = 4; //日志名称4624(Security Log), AS_REQ(krb5)
    string SourceId = 5;
    string BeatName = 6; //传感器名字
    string Content = 7; //日志包含流量和日志的json字符串
    string createTm = 8;
  }
  repeated Details List = 2;
  bool exhausted = 3; // if this is last page
}

message GetRuleInfoReq {
  string ruleId = 1;
}

message GetRuleInfoReply {
  string ID = 1;//智域ID
  string type = 2;//规则类型
  string name = 3;//规则名称
  string attCkId = 4;//ATT&CK-TacTics
  repeated string attCkTech = 5;//ATT&CK-Techniques
  int32 ruleLevel = 6; //规则复杂度: 1\2\3
  string eventTmpl = 7; //事件模板
  string riskDesc = 8; //漏洞描述
  string verifyDesc = 9; //误报排查
  string suggestion = 10; //修复建议
  string remark = 11;//备注
}

message GetDCNameListReq {}
message GetDCNameListReply {
  repeated string dcNameList = 1;
}

message GetTargetReq {}

message GetTargetReply {
  repeated string getTargetList = 1;
}

message GetDomainFromAlertReq {}
message GetDomainFromAlertReply {
  message Details {
    string domain = 1;
    string name = 2;
  }
  repeated Details domainList = 1;
}

message ListAttackPathReq {
  string domain = 1;
  repeated string ruleIDList = 2;//数组，长度最小1，最大300;
  string startTm = 3;
  string endTm = 4;
  string name = 5;
  string nameType = 6;
  string level = 7;  // all alert activity
  int32 pageIdx = 8; // start index with 1
  int32 pageSize = 9 ; // if pageSize is -1, we will return all nodes
}

message ListAttackPathReply {
  message Details {
    string time = 1;
    string id = 2;
    string name = 3;
    string desc = 4;
    int32 attackType = 5; // 0为活动，其余为告警
    string Statistics = 6;// 统计信息
    map<string, string> formData = 7;
  }
  repeated Details list = 1;
  bool exhausted = 2;// 是否是最后一页
}

message ExportAttackPathReq {
  string domain = 1;
  string startTm = 2;
  string endTm = 3;
  string name = 4;
  string nameType = 5;
  repeated  string ruleList = 6;
}

message ExportAttackPathReply {
  string taskUUID = 1; //任务ID
  string path = 2;  //下载路径
}

message ListThreatEventSearchReq {
  string searchType = 1;
  string search = 2;
}

// 用于接收三个时间点TimeReq
message AlarmAnalysisReq {
  string interval = 1;// 接受自然时间单位，年、月、周、日-year,month,week,day
  string startTm = 2;
  string endTm = 3;
  string template = 4;// 2006-01-02 15:04:05  需要到哪里就输入到哪里
  string domain = 5 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
}

message ListThreatEventSearchReply {
  repeated string list = 1;
}

// 用于接收三个时间点TimeReq
message RiskTrendReq {
  string interval = 1;// 接受自然时间单位，年、月、周、日-year,month,week,day
  string startTm = 2;
  string endTm = 3;
  string template = 4;// 2006-01-02 15:04:05  需要到哪里就输入到哪里
  string domain = 5 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
}

// 告警分析部分返回
message AlarmAnalysisReply {

  message Details {
    string name = 1;
    int32 value = 2;
  }
  repeated Details attackLevel = 1;
  repeated string alarmType = 2;
  repeated int32 alarmCount = 3;
}

// 分析趋势返回值
message RiskTrendReply {
  repeated string xList = 1;

  repeated int32 alarmYList = 2;
  repeated int32 scanYList = 3;
  repeated int32 leakYList = 4;
}

message ListStatsAlertNameReq {
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
}

message ListStatsAlertNameReply {
  repeated string rowList = 1;
  repeated int32 columnList = 2;
}

message ListStatsAlertTypeReq {
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
}

message ListStatsAlertTypeReply {
  message Details {
    string name = 1;// 名称
    int32 value = 2; // 数量
  }
  repeated Details list = 1;
}

// risk market
message StatsAlertActivityReq {
  string domain = 1; // 指定域，如果全部域则传入空
}

message StatsAlertActivityReply {
  int32 total = 1; // 总数量
  repeated string abscissaList = 2;
  repeated   int32   alertActivityList = 3;
}

message StatsRiskAssetsReq {
  string domain = 1; // 指定域，如果全部域则传入空
}

message StatsRiskAssetsReply {
  int32 assetsTotal = 1; // 近七天受影响资产总数
  int32 riskAssetsToday = 2; // 今日首影响数量
}

message StatsAlertEventsReq{
  string domain = 1; // 指定域，如果全部域则传入空
}

message StatsAlertEventsReply{
  int32 alertEvents = 1; // 近七天告警事件总数
  int32 alertEventsToday = 2; // 今日首影响数量
}

message StatsScanEventsReq {
  string domain = 1; // 指定域，如果全部域则传入空
}

message StatsScanEventsReply {
  int32 baseLineEvent = 1; // 基线检测数量
  int32 leakEvent = 2; // 漏洞检测数量
}

message StatsAssetsReq {
  string domain = 1;// 指定域，如果全部域则传入空
}

message StatsAssetsReply {
  int32 assetsTotal = 1; // 资产总数
  int32 userAssetsNumber = 2; // 用户资产总数
  int32 computerAssetsNumber = 3; // 计算机资产总数
  int32 groupAssetsNumber = 4; // 组资产总数
}

message GetScanRuleReq {
  string label = 1 ;//validator.field) = {regex: "陈旧对象|特权帐户|信任关系|异常现象"}]; //
}

message GetScanRuleReply {

  message Details {
    string ID = 1;
    int32 points = 2; //分数
    int32 status = 3; //状态 1修复 0已修复
    string sn = 4;
    string name = 5; //检测项名字
    string desc = 6; //检测项描述
    string explanation = 7; //解释
    string solution = 8; //解决方案
    string rationale = 9;//理由
  }

  message labelDetails {
    int32 subTypeCont = 1; // 子类项目 判断这个为0 就不用展示
    repeated Details subType = 2; //子类列表
  }
  map <string, labelDetails> subTypeMap = 1;
  map <string, string> subTypeTranslate = 2;

}


message ScanInspectionReq {
  string type = 1; //  扫描类型: all  一键巡检
  repeated string domains = 2 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}]; // 域名
}

message ScanInspectionReply {
  // string taskUUID = 1; //任务UUID
  string result = 1; // SUCCESS||FAILED
}

message GetScanTaskStateReq {
  string label = 1 ;//validator.field) = {regex: "陈旧对象|特权帐户|信任关系|异常现象"}]; //陈旧对象  特权帐户 信任关系 异常现象
  string taskUUID = 2 ; //任务UUID
}

message GetScanTaskStateReply {
  message State {
    string status = 1;//任务状态 PENDING  STARTED  SUCCESS FAILURE
    string error = 2; // status="FAILURE" 展示错误信息
  }

  message Details {
    string ID = 1;
    int32 points = 2; //分数
    int32 status = 3; //状态 1修复 0已修复
    string sn = 4;
    string name = 5; //检测项名字
    string desc = 6; //检测项描述
    string explanation = 7; //解释
    string solution = 8; //解决方案
    string rationale = 9;//理由
  }

  message labelDetails {
    int32 subTypeCont = 1; // 子类项目 判断这个为0 就不用展示
    repeated Details subType = 2; //子类列表
    bool isShow = 10; //前端控制展开
  }
  map <string, labelDetails> subTypeMap = 1;
  map <string, string> subTypeTranslate = 2;
  State state = 3;
}

message GetScanScoreReq {
  string domain = 1 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all|^(\\s&&[^\\f\\n\\r\\t\\v])*"}];
}

message GetScanScoreReply {
  //code 14 则无结果
  string domain = 1;
  int32 global = 2; //总分分数
  int32 staleObjects = 3; //陈旧对象分数
  int32 privilegedAccounts = 4; //特权帐户
  int32 trustRelationships = 5; //信任关系
  int32 anomalyObject = 6; //异常现象
  string update_tm = 7;//最近扫描时间
}

message SetCronTaskReq {
  string id = 1;
  bool enable = 2; // 是否开启
  RepeatEnum cycle = 3; // 0是day，1是week，2是month 
  int32 Rate = 4; //扫描速率, 每秒发送多少数据包
}

message SetCronTaskReply {
  string result = 1; //  success failed
}

message ListCronTaskReq {
  int32 pageIdx = 1;
  int32 pageSize = 2;
}

message ListCronTaskReply {
  message Details {
    string id = 1;
    string name = 2;
    bool enable = 3; // 是否开启
    RepeatEnum cycle = 4;  // 0是day，1是week，2是month
    int32 Rate = 5; //扫描速率, 每秒发送多少数据包
    string Explain = 6; // 说明
  }
  ModelPage page = 1;
  repeated Details list = 2; // 列表
}

message EventListReq {
  int32 pageIdx = 1;
  int32 pageSize = 2;
  repeated string categorys = 3  ;// 查询类型,信任关系Trusts，特权帐户PrivilegedAccounts，异常现象Anomalies，陈旧对象StaleObjects
  repeated string domains = 4 ;//validator.field) = {regex: "^([a-zA-Z0-9-]+.)+([a-zA-Z])+$|all"}]; // 只能包含域或者是all为所有
  repeated string levels = 5 ; // 低low 中mid 高high
  string eventName = 6; // 事件名称，模糊搜索
  int32 points = 7; // 分数排序 1|-1, 默认0，不排序
  int32 lastScanTime = 8; // 最后扫描事件排序 1|-1， 默认-1
}

message EventListReply {
  ModelPage page = 1;
  message Details {
    string eventID = 1;
    string domain = 2;
    string rationale = 3; // 事件名称
    string level = 4;
    int32 numberInstances = 5;// 影响对象数量
    int32  points = 6; // 分值
    string category = 7;// 类别
    string lastScanTime = 8; // 最后扫描时间
    string product = 9;// 产品
    string ruleId = 10;
    int32 status = 11; // 1为未修复，0为已修复
  }
  repeated Details subType = 2; // 错误列表
}


message EventDetailsReq {
  string ruleId = 1;
}

message EventDetailsReply {
  string category = 1; // 类别
  string desc = 2; // 问题描述
  string docs = 3; // 详情连接
  string explanation = 4;//说明
  string name = 5; // 问题名称
  int32 points = 6; // 分值
  string remark = 7;
  string sn = 8; //规则
  string solution = 9; // 解释
  string sub_type = 10; // 子类型
}

message LastScanInfoReq {}
message LastScanInnfoReply {
  string taskUUID = 1 ;
  string status = 2;
}

message StopScanReq {
  string taskUUID = 1 ;
}


message StopScanReply {

}

message ListOnlineDomainReq {}

message  ListOnlineDomainReply {
  message Details {
    string domain = 1;
    string name = 2;
  }
  repeated Details domainList = 1;
}

message ListDomainByScanEventReq {}
message  ListDomainByScanEventReply {
  message Details {
    string domain = 1;
    string name = 2;
  }
  repeated Details domainList = 1;
}

message ExportScanEventReq {
  repeated string domainName = 1;
  string startTm = 2;
  string endTm = 3;
}

message ExportScanEventReply {
  string taskUUID = 1; //任务ID
  string path = 2;  //下载路径
}

message GetInstanceListReq {
  int32 pageIdx = 1;
  int32 pageSize = 2;
  string eventID = 3;
}

message GetInstanceListReply {
  ModelPage page = 1;

  message TableHeads {
    string columnName = 1;    // 表头名
    string columnComment = 2; // 对应的字段
  }
  repeated TableHeads tableHeads = 2; // 表头

  message Details {
    map<string, string> formData = 1;
  }
  repeated Details list = 3;
}

message ExportLeakEventReq {
  repeated string domainName = 1;
  string startTm = 2;
  string endTm = 3;
}

message ExportLeakEventReply {
  string taskUUID = 1; //任务ID
  string path = 2;  //下载路径
}

message ScanLeakEventReq {
  string scanType = 1; // 一键检测all,列表内一键检测single
  repeated int64 plugins = 2; // 选择插件的id
  repeated string domains = 3; // 如果是一键检测，传入选择的域
  string fqdn = 4; // 如果是立即检测，传入选择扫描的fqdn地址
}

message ScanLeakEventReply {
  // string taskID = 1; // 任务id，用于获取任务状态
  string result = 1; // 是否成功，success failed
}

message GetScanLeakEventStatusReq{
  string taskID = 1;
}

message GetScanLeakEventStatusReply{
  string status = 1; // 用于展示任务的扫描漏洞状态，STARTED RUNNING FINISH
  int32 total = 2; // 任务总数
  int32 finished = 3; // 完成的数量
}

message StatsLeakEventReq {}

message StatsLeakEventReply {
  int32 unfixLeakCount = 1; // 未修复的漏洞数量
  int32 dcCount = 2; // 影响的服务器
}

message ListLeakEventReq {
  repeated string domains = 1; //选择域
  repeated string leakTypes = 2; // 漏洞类型
  repeated int32 levels = 3; // 风险等级
  repeated int32 statuses = 4; // 风险情况 默认传空，0为已修复，1为未修复
  string search = 5; // 搜索字段
  int32 pageIdx = 6;
  int32 pageSize = 7;
  string startCreateTm = 8; // 披露时间
  string endCreateTm = 9;
  string startUpdateTm = 10;
  string endUpdateTm = 11;
  int32 orderCreateTm = 12; // 根据披露时间可以选择排序 1升序，-1降序，默认-1
  int32 orderLastCheckTm = 13; // 根据披露时间可以选择排序 1升序，-1降序，默认0，不排序
}

message ListLeakEventReply {
  message Details {
    string id = 1;
    string name = 2; // 漏洞名称
    string fqdn = 3; // fqdn地址
    string leakType = 4;
    int32 level = 5;
    string creatTm = 6; // 披露事件
    string updateTm = 7; //最后检测时间
    string desc = 8; //漏洞描述
    int32 status = 9; //风险情况，默认值0为存在风险，1为暂无风险
    string eventTmpl = 10;
    string url = 11;
    int32 pluginID = 12;
    string detectStatus = 13; // 事件检测状态
    string errMsg = 14; // 事件失败信息
    string detectResult = 15; // 事件检测结果

  }
  repeated Details list = 1;
  ModelPage page = 2;
}

message ListScanPluginReq {
  int32 pageIdx = 1 ;
  int32 pageSize = 2 ;
  string enable = 3;// 根据是否启用查看插件列表，1代表开启的，0代表未开启，传空就是全部
}

message ListScanPluginReply {
  message Details {
    int32  id = 1; // 扫描器ID
    string display = 2; // 扫描器名称
    string leakType = 3;//漏洞类型
    int32 level = 4;// 风险等级
    string updateTm = 5;// 插件更新时间
    int32 enable = 6; //是否开启，0为未开启
    string version = 7;
    map<string, string>  mateData = 8; //参数列表
  }
  repeated Details list = 1;
  ModelPage page = 2;
}

message UpdateScanPluginEnableReq {
  int32 id = 1;
  int32 enable = 2; // 用于开关扫描器，0为关闭，1为开启
}

message UpdateScanPluginEnableReply {
  string result = 1;
}

message UpdateScanPluginMetaDataReq {
  int32 id = 1;
  map<string, string>  metaData = 2;
}

message UpdateScanPluginMetaDataReply {
  string result = 1;
}

message ListScanPluginTypeReq {}
message ListScanPluginTypeReply {
  repeated string pluginType = 1;
}

message GetDomainListFromScanEventReq {}

message GetDomainListFromScanEventReply {
  repeated string domainList = 1;
}

message CheckMfaReq {
  string username = 1;
  string password = 2;
}

message CheckMfaReply {
  bool hasMfa = 1;
}

message EnableMfaReq {
  string username = 1;
  string password = 2;
  string secret = 3;
  string mfaCode = 4 ;//validator.field) = {length_eq: 6}];
}

message EnableMfaReply {
  string result = 1; // SUCCESS || FAILED
}

message DisableMfaReq {
  string username = 1;
}

message DisableMfaReply {
  string result = 1; // SUCCESS || FAILED
}

message UpdateAvatarReq {
  int32 userId = 1;
  string file = 2;
}

message UpdateAvatarReply {
  string result = 1; //  success failed
}

message ResetPasswordReq {
  string username = 1;
  string newPassword = 2 ;//validator.field) = {length_gt: 11}];
}

message ResetPasswordReply {
  string result = 2;
}

message ListNotifyReq {
  string notifyStatus = 1;// 0为未读消息，1为已读消息，2为全部消息
  int32 pageIdx = 2 ; // start index with 1
  int32 pageSize = 3 ; // if pageSize is -1, we will return all nodes
  string notifyType = 4;// 消息类型,Leak漏洞监测，Baseline主动检测，Alert告警事件,System系统告警
  string notifySubType = 5; // 事件类型
  string startCreateTm = 6; // 时间范围开始时间
  string endCreateTm = 7; // 时间范围结束时间
  string keyword = 8; // 标题关键词
  int32 createTmSort = 9; // 创建时间排序
}

message ListNotifyReply {
  message Details {
    string ID = 1;
    string title = 2;   // 标题
    string messageType = 3;    //消息 主动监测Scan 告警事件Alert 系统消息System
    string eventType = 4;    // 事件类型
    string creatTm = 5; // 时间
    string desc = 6;    // 告警详情
    int32 status = 7;  // 消息状态，0为未读，其余为已读
    map<string, string> attributes = 8; // 属性，预留字段
    bool isShow = 9;
  }
  repeated Details notifyList = 1;
  ModelPage page = 2;

}

message UpdateNotifyReq {
  repeated string IDList = 1; // 修改状态的事件ID
}

message UpdateNotifyReply {
  string result = 1; // 是否成功 SUCCESS FAILURE
}

message ListNotifyConfReq {
  int32 pageIdx = 1 ; // start index with 1
  int32 pageSize = 2 ; // if pageSize is -1, we will return all nodes
  repeated  string moduleType = 3; // 模块类型 System,Scan,Alert
  repeated string notifyType = 4; // 通知类型 syslog,webhook,email
  string target = 5; // 通知目标
  repeated string enable = 6; // 启用状态， 开启enable 关闭stop
  int32 sortTime = 7; // 根据时间排序，1升序，-1降序,0为默认顺序
}

message ListNotifyConfReply {
  message Details {
    string id = 1;
    string moduleType = 2; // 模块类型 System:系统,Alert:告警,Baseline:基线,leak:漏洞
    string notifyType = 3; // 通知类型 syslog,webhook,email
    string target = 4; // 接受者
    string remark = 5; // 备注
    string enable = 6; //启用状态， 开启enable 关闭stop
    string updateTm = 7; // 修改时间
  }
  repeated Details list = 1;
  ModelPage page = 2;
}

message UpdateNotifyConfReq {
  string id = 1 ;//validator.field) = {string_not_empty: true}];
  string target = 2;
  string sender = 3 ;//validator.field) = {regex: "^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$|^(\\s&&[^\\f\\n\\r\\t\\v])*"}]; // 发件人邮箱
  string senderIdentity = 4 ; // 发送者密码 如果没有修改则直接传空
  string server = 5 ; // 服务器地址
  string port = 6 ; // 端口
  repeated  int32 level = 7; // 危险等级
  int32 alertInterval = 8; // 时间间隔
  string remark = 9; // 备注
  string senderName = 10;//  发送人
}

message UpdateNotifyConfReply {
  string result = 1;// SUCCESS||FAILED
}

message UpdateNotifyConfEnableReq{
  string id = 1; // 配置ID
  string enable = 2; // 开关 开启enable 关闭disable
}

message UpdateNotifyConfEnableReply{
  string result = 1; // SUCCESS||FAILED
}

message GetNotifyConfInfoReq{
  string id = 1;
}

message GetNotifyConfInfoReply{
  string id = 1;
  string moduleType = 2;
  string notifyType = 3;
  string target = 4 ; // 接受者
  string sender = 5 ; // 发件人邮箱
  string server = 6 ; // 服务器地址
  string port = 7 ; // 端口
  string enable = 8;
  repeated  int32 level = 9;
  int32 alertInterval = 10; // 时间间隔
  string remark = 11;
  string updateTm = 12;
  string senderName = 13; // 发送人名称
}

message ListNotifyTargetReq{}

message ListNotifyTargetReply{
  repeated string targetList = 1;
}

message TestEmailSendReq {
  map <string, string> config = 1;
}

message TestEmailSendReply {
  string result = 1;
  string msg = 2;
}

message StatsNotifyReq {}
message StatsNotifyReply {
  int64 all = 1;
  int64 unread = 2;
  int64 read = 3;
}

message SelectOptionNotifyReq {}
message SelectOptionNotifyReply {
  message subType {
    string name = 1;
    string value = 2;
  }
  message msgType {
    string name = 1;
    string value = 2;
    int32  sort = 3;
    repeated subType subTypes = 4;
  }

  repeated msgType result = 1;
}

message GenerateEventReportReq {
  string name = 1; // 报表名称
  string startTm = 2; // 开始时间
  string endTm = 3; // 结束时间
}

message GenerateEventReportReply {
  string result = 1; // SUCCESS||FAILED
  string taskID = 2;
}

message ListEventReportReq {
  int32 pageIdx = 1 ;//validator.field) = {int_gt: 0}];
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
}

message ListEventReportReply {
  ModelPage page = 1;
  message Details {
    string ID = 1; // 报表ID
    string name = 2;// 报表名称
    string timeInterval = 3;// 起止时间
    string  status = 4;//任务状态 PENDING RECEIVED STARTED RETRY SUCCESS FAILURE
    string path = 5;
  }
  repeated Details list = 2;
}

message StatusEventReportReq {
  string taskID = 1 ; //任务ID
}
message StatusEventReportReply {
  string taskUUID = 1; //任务ID
  string taskName = 2; //任务名称
  string state = 3; //任务状态 PENDING RECEIVED STARTED RETRY SUCCESS FAILURE
  string error = 4; //错误日志
  string  createdAt = 5; //创建时间
}

message DownloadEventReportReq {
  string ID = 1;
  string type = 2;
}

message DownloadEventReportReply {
  string path = 2;
}

message DeleteEventReportReq {
  string ReportID = 1;
}

message DeleteReportReply {
  string result = 1;
}

message ListDomainNameForEventListReq {}

message ListDomainNameForEventListReply {
  message Details {
    string domain = 1;
    string name = 2;
  }
  repeated Details domainList = 1;
}

message ListDomainNameReq {}
message ListDomainNameReply {
  message Details {
    string domain = 1;
    string name = 2;
  }
  repeated Details domainList = 1;
}

message GetDomainInfoReq {
  string domainID = 1;
  int32  PageSize = 2; // 每页条数
  int32  PageIdx = 3; // 当前页数
  int32  Sort = 4; // 排序 1升序 -1降序
  string Keyword = 5; // 搜索
}

message GetDomainInfoReply {
  message Details {
    string dcHostName = 1; // 域控名称
    repeated string ip = 2; // ip列表
    string status = 3; // 状态
    string errMsg = 4; // 错误信息
    string platform = 5; // 操作i系统
    bool isPullLog = 6; // 是否开启日志采集
    string timeout = 7;
    string LastOnlineTm = 8; // 最后检测时间
  }
  repeated Details  dcList = 1;
  string dns = 2;
  string createTime = 3;
  int32 total = 4; // 总条数
  string domain = 5; // 所在域
}

message SetMsRCPReq {
  string domainID = 1;
  string dcHostName = 2;
  bool isPullLog = 3;
}

message SetMsRCPReply {
  string result = 1; // 是否成功
}

message UpdateDomainDataReq {
  string domainID = 1;// 域的ID
}

message UpdateDomainDataReply {
  string result = 1;//  success failed
}

message GetDCListReq {}

message GetDCListReply {
  repeated string list = 1;
}

message AddWecConfReq {
  string fqdn = 1;
  string ip = 2;
}

message AddWecConfReply {
  string result = 1;
}

message TestWecConfReq {
  string fqdn = 1;
  string ip = 2;
}

message TestWecConfReply {
  string result = 1;
}

message WecBeatInfoReq {
  string id = 1;
}
message WecBeatInfoReply {
  string fqdnAddr = 1;// 域控制器名称
  string operationSystemVersion = 2; // 操作系统
  repeated string ipList = 3; // ip
  string lastTime = 4; // 最后在线时间
  string wecBeatType = 5; // MSRPC/certificate证书转发
}

message ListWecBeatEventInfoReq {
  int32 pageIdx = 1 ;
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  string wecBeatID = 3;
  int32 orderEventID = 4 ; // 可选，排序 1|-1
  int32 orderCount = 5 ; // 可选，排序 1|-1
  int32 lastEventTmSort = 6 ; // 可选，排序 1|-1
}

message ListWecBeatEventInfoReply {
  ModelPage page = 1;
  message Details {
    int32 eventID = 1; // 时间id
    int32 eventNumber = 2; // 事件数量
    string lastTm = 3; // 最后发生时间
  }
  repeated Details eventList = 3; // 采集详情
}

// assets 资产
message ListAssetsUserReq {
  int32 pageIdx = 1 ;
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  string domainName = 3;
}

message ListAssetsUserReply {
  ModelPage page = 1;
  message Details {
    string domainName = 1;
    string id = 2;
    string sid = 3;
    string name = 4;
    string domain = 5;
    string dn = 6;
    string memberOf = 7;// 所属关系
    string description = 8 ;// 描述
    string lastLoginTime = 9;// 最后登录时间
    string pwdLastSet = 10; // 最后密码修改时间
    string created = 11; // 用户创建时间
    string update = 12;// 同步时间
  }
  repeated Details list = 2;
}

message ListAssetsComputerReq {
  int32 pageIdx = 1 ;
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  string domainName = 3;
}

message ListAssetsComputerReply {
  ModelPage page = 1;
  message Details {
    string domainName = 1;
    string id = 2;
    string sid = 3;
    string name = 4;
    string domain = 5;
    string dn = 6;
    string memberOf = 7;// 所属关系
    string description = 8 ;// 描述
    string operationSystem = 9;// 操作系统
    string operationSystemVersion = 10;// 操作系统版本
    string lastLoginTime = 11; // 最后登陆时间
    string pwdLastSet = 12; // 最后密码修改时间
    string created = 13;// 用户创建时间
    string update = 14;//同步资产时间
  }
  repeated Details list = 2;
}

message ListAssetsGroupReq {
  int32 pageIdx = 1 ;
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  string domainName = 3;
}

message ListAssetsGroupReply {
  ModelPage page = 1;
  message Details {
    string id = 2;
    string sid = 3;
    string name = 4;
    string domain = 5;
    string dn = 6;
    string memberOf = 7;// 所属关系
    string created = 8;// 用户创建时间
    string update = 9;//同步资产时间
  }
  repeated Details list = 2;
}

message CalculateAssetsReq {
  string domain = 1;
}

message CalculateAssetsReply {
  int32 userNumber = 1;
  int32 computerNumber = 2;
  int32 groupNumber = 3;
  int32 groupPoliceNumber = 4;
  int32 ouNUmber = 5;
}

message CalculateAssetsUserEventReq {
  string domain = 1;
}

message CalculateAssetsUserEventReply {
  int32 suspiciousUser = 1;
  int32 invalidUser = 2;
  int32 lockedUser = 3;
  int32 disabledUser = 4;
  int32 highPrivilegedUser = 5;
}

message CalculateAssetsLoginEventReq {
  string domain = 1;
}

message CalculateAssetsLoginEventReply {
  int32 noLoginUser = 1;
  int32 loginFailedUser = 2;
  int32 expiredPwdUser = 3;
  int32 expiredUser = 4;
  int32 wrongPwdUser = 5;
}

message CalculateAssetsComputerEventReq {
  string domain = 1;
}

message CalculateAssetsComputerEventReply {
  int32 invalidComputer = 1;
  int32 suspiciousComputer = 2;
  int32 outdatedOperatingSystem = 3;
  int32 outdatedDC = 4;
  int32 noActivityComputer = 5;
}

message CalculateAssetsGroupReq {
  string domain = 1;
}

message CalculateAssetsGroupReply {
  int32 emptyGroup = 1;
  int32 highPrivilegedGroup = 2;
  int32 sensitiveGroup = 3;
  int32 safeGroup = 4;
  int32 distributionGroup = 5;
}

message GetAssetsDetailsByAlertReq {
  string domain = 1;
  string type = 2; // user,computer,group,ip
  string name = 3;
}

message GetAssetsDetailsByAlertReply {
  string  id = 1;
  string  sid = 2;
  string  name = 3;
  string  domain = 4;
  string  dn = 5;
  string  description = 6; // 描述
  bool  isAdmin = 7; // 是否是管理员
  string  lastLoginTime = 8; // 最后一次登陆时间
  string  creatTm = 9; // 创建时间
  string  title = 10; // 职位
  string pwdLastTm = 11;// 最后密码修改时间
  repeated string authority = 12; // 权限列表
  string dnsName = 13; // dns名称 name+domain_name
  string systemVersion = 14;//规范名称 dc+ou+cn
  repeated  string spn = 15;// spn
  int32 memberCount = 16;
}

message ListGroupByAssetsReq {
  string domain = 1;
  string name = 2;
  string assetsType = 3;
}

message ListGroupByAssetsReply {
  message Details {
    string name = 1;
    string domain = 2;
  }
  repeated Details list = 1;

}

message ListAssetsUserByGroupReq{
  int32 pageIdx = 1 ;
  int32 pageSize = 2;
  string domain = 3; // 所在域
  string groupName = 4; // 组名称
}

message ListAssetsUserByGroupReply{
  ModelPage page = 1;
  message Details{
    string name = 1;
    string domain = 2;
  }
  repeated Details list = 2;
  bool exhausted = 3; // if this is last page
}

message GetAssetsEntryReq {
  string domain = 1;
  string type = 2;
  string search = 3;
}

message GetAssetsEntryReply {
  repeated string assetsList = 1;
}

message GetAssetsActivitiesReq {
  string domain = 1;
  string type = 2;
  string search = 3;
}
message GetAssetsActivitiesReply {
  int32  threatNumber = 1; // 威胁数量
  int32 loginNumber = 2; // 登录数量(计算机或用户)
  int32 resourcesNumber = 3; // 访问过的资源数量
  int32 IPNumber = 4; // 计算机使用过的ip
  message Details {
    string name = 1;
    string time = 2;
  }
  repeated Details IPList = 5;
  repeated Details loginList = 6;
}

message StatsAssetsActivitiesLevelReq{
  string domain = 1;
  string search = 2;
}

message StatsAssetsActivitiesLevelReply{
  message Details{
    int32 level = 1;
    int32 count = 2;
  }
  repeated Details list = 1;
  int32 total = 2;
}

message GetAssetsSensitiveGroupLabelInfoReq{
  string domain = 1;
  string type = 2;
  string name = 3;
}

message GetAssetsSensitiveGroupLabelInfoReply{
  string desc = 1; // 敏感组标签描述
}

message ListUsersSensitiveGroupReq{
  string domain = 1;
  string name = 2;
}

message ListUsersSensitiveGroupReply{
  message Details {
    string groupName = 1; // 敏感组名称
    string desc = 2; // 描述
    string domain = 3; // 域名
  }
  repeated Details list = 1; // 敏感组列表
  int32 count = 2; // 总数
}

message GetAssetsLabelReq {
  string domain = 1; // 域
  string assetsType = 2; // 资产类型
  string name = 3; // 资产名称
}

message GetAssetsLabelReply {
  repeated string label = 1;// 标签类型  sensitive:敏感用户/计算机/组
}

message ListSearchLogEventReq {
  int32 pageIdx = 1 ;
  int32 pageSize = 2;
  string domain = 3;
  string logType = 4; // 数据源: log|packet
  string startTm = 5; // 开始时间
  string endTm = 6;  // 结束时间
  string search = 7; // 模糊搜索
}

message ListSearchLogEventReply {
  ModelPage page = 1;
  message Details {
    int32 number = 1;
    string uid = 2;
    string time = 3;
    string text = 4;
  }
  repeated Details list = 2;
  string startTm = 3; // 开始时间
  string endTm = 4;  // 结束时间
}

message GetSearchLogFieldReq {
  string domain = 1;
  string logType = 2; // 数据源: log|packet
}

message GetSearchLogFieldReply {
  message fieldInfo {
    string name = 1;
    int64 total = 2;
    repeated string values = 3;
  }

  repeated fieldInfo fields = 1;
}

message GetSearchFieldInfoReq {
  string domain = 1;
  string fieldType = 2; // 数据源类型，log-日志，packet-流量
  string filedName = 3; // 字段名
}

message GetSearchFieldInfoReply {
  int32 valueNumber = 1; // 字段数量
  string proportion = 2;  // 占比
  string desc = 3; // 描述
  message Details {
    string value = 1;  // 字段名
    int32 count = 2;  //数量
    string proportion = 3; // 占比
  }
  repeated Details list = 4;
}

message GetThreatEventByUniqueIDReq {
  string uniqueID = 1;
}
message GetThreatEventByUniqueIDReply {
  ThreatEventDetails details = 1;
}

enum GetSearchChartDataType {
  minutes = 0;
  day = 1;
  week = 2;
  month = 3;
}

message GetSearchChartDataReq {
  string domain = 1;
  GetSearchChartDataType type = 2;
}
message GetSearchChartDataReply {
  string domain = 1;
  repeated string xAxis = 2;
  repeated int32 yAxisLog = 3;
  repeated int32 yAxisKrb = 4;
}

message AddSearchTemplateReq {
  string title = 1;
  string content = 2;
  string logType = 3; // 日志log，packet流量
}
message AddSearchTemplateReply {
  string result = 1;
}

message ListSearchTemplateReq {
  int32 PageIdx = 1;
  int32 PageSize = 2;
  string logType = 3;  // 日志类型 日志log 流量 packet
}
message ListSearchTemplateReply {
  message Details {
    string id = 1;        // id
    string title = 2;     // 标题
    string content = 3;   // 内容
    int32 is_delete = 4;  // 是否删除 0未删除 1已删除
    int32 is_system = 5;  // 是否是系统内置模板 0不是 1是
    string log_type = 6;  // 日志类型 日志log 流量 packet
    string created_at = 7;// 创建时间
    string updated_at = 8;// 更新时间
  }

  repeated Details lists = 1;
  ModelPage page = 2;
}

message DeleteSearchTemplateReq {
  string id = 1;
}
message DeleteSearchTemplateReply {
  string result = 1;
}

message ListSearchTableColumnsReq {
  string logType = 1; // 数据源: log|packet
}
message ListSearchTableColumnsReply {
  message Details {
    string field = 1;        // 字段名称
    string type = 2;     // 字段类型
  }

  repeated Details lists = 1;
}

// 周期， 0是day，1是week，2是month
enum RepeatEnum {
  every_day = 0;
  every_week = 1;
  every_month = 2;
}

message GetPwdUpdateTmReq{
  string userName = 1;
}
message GetPwdUpdateTmReply{
  bool needChangePwd = 1;
  string pwdUpdateTm = 2;
}

message ListTaskManagerGroupReq {
  int32 pageIdx = 1 ;
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 2;
  repeated string triggers = 3; // 是否定时任务 cron:定时; once:只会执行一次
  repeated string tmgTypes = 4; // 类型 baseline/leak 基线/漏洞
  repeated string statuses = 5; // 状态 PENDING/RUNNING/FINISH/FAILURE 准备中/运行中/成功/失败
  string endTmStart = 6;
  string endTmEnd = 7;
  int32 orderCreateTm = 8; // 创建时间排序 1升序 -1降序, 默认-1
  int32 orderEndTm = 9; // 结束时间排序 1升序 -1降序, 默认无
}

message ListTaskManagerGroupReply {
  message Details {
    string id = 1;
    string tmgType = 2;
    string status = 3;
    string progress = 4;
    string createTm = 5;
    string endTm = 6;
    string trigger = 7; // 是否定时任务 cron:定时; once:只会执行一次
    string errMsg = 9;
  }
  repeated Details taskManagerGroupList = 1;
  ModelPage page = 2;
}

message DetailTaskManagerGroupReq {
  string id = 1; // taskManagerGroup id
  int32 pageIdx = 2 ;
  // if pageSize is -1, we will return all pods.
  int32 pageSize = 3;
  int32 orderLastCheckTm = 4; // 上次检测时间排序
  int32 orderCreateTm = 5; // 披露时间排序
  int32 orderUpdateTm = 6; //最后检测时间排序
  int32 orderPoints = 7; // 分数排序
}

message DetailTaskManagerGroupReply {
  ModelPage page = 1;

  message TableHeads {
    string columnName = 1;    // 表头名
    string columnComment = 2; // 对应的字段
  }
  repeated TableHeads tableHeads = 2; // 表头

  message Details {
    map<string, string> formData = 1;
  }
  repeated Details List = 3;
  bool exhausted = 4; // if this is last page
}

message DeleteTaskManagerGroupReq {
  repeated string ids = 1;
}

message DeleteTaskManagerGroupReply {}

message ProtectInfoReq{
  string tmgType = 1;  // 类型 baseline/leak 基线/漏洞
  string domain = 2;
}

message ProtectInfoReply {
  int32 detectItemCount = 1; // 总检测漏洞
  int32 detectDomainCount = 2; // 检测服务器
  int32 riskItemCount = 3; // 未修复漏洞
  int32 riskDomainCount = 4; // 影响服务器
}

message IsScanningReq{
  string tmgType = 1;  // 类型 baseline/leak 基线/漏洞
}

message IsScanningReply {
  int32 status = 1;   // 1 有， 0 无
}

message BaselineScanStatusReq{

}

message BaselineScanStatusReply {
  message Details {
    string domain = 1;
    int32 status = 2; // 1 有， 0 无 (如果此域状态不正常，也为1)
  }
  repeated Details List = 1;
}

message  LeakScanStatusReq {

}

message LeakScanStatusReply {
  message Details {
    string domain = 1;
    int32 status = 2; // 1 有， 0 无 (如果此域状态不正常，也为1)
  }
  repeated Details List = 1;
}

message LeakScanLoopholeStatisticsReq {
  string domain = 1;
}

message LeakScanLoopholeStatisticsReply{
  int32 currentCount = 1;  // 当前域已发现的漏洞数
  int32 possibleCount = 2; // 当前域可能发现的漏洞数
}

message BaselineNewResultReq{
  string domain = 1;
}

message BaselineNewResultReply {
  string score = 1; //总分
  int32 issueCount = 2; // 问题项
}

message OverviewLeakEventListReq {
  string domain = 1;
  int32 orderUpdateTm = 2; // 最后检测时间排序 1为升序，-1为降序, 默认为降序
}

message OverviewLeakEventListReply {
  message Details {
    string name = 1; // 漏洞名称
    int32 riskLevel = 2; // 风险等级
    int32 affectDcCount = 3; // 影响dc数
    string updateTm = 4; //最后检测时间

  }
  repeated Details list = 1;
}